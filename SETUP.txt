******************************************************************************************
MACOS (dev)
******************************************************************************************

# -------------------------------
# public-foundry-combinator setup
# -------------------------------

# homebrew setup
# --------------

brew install libagg pkg-config fontforge

If necessary:
    brew uninstall libffi && brew install libffi

# evironment setup
# ----------------

conda create --name public-foundry-combinator python=3.7 pyqt numpy tensorflow=1.15 flask flask-cors lxml
conda activate public-foundry-combinator

pip install flask_socketio bs4 svgpathtools
pip install tensor2tensor
pip install magenta

# OR instead:
git clone https://github.com/tensorflow/magenta.git && \
cd magenta/ && \
pip install -e .

# ----------------------------------
# public-foundry-combinator-ui setup
# ----------------------------------

brew install yarn

# -------------------
# development servers
# -------------------

# to start public-foundry-combinator:    python combinator.py
# to start public-foundry-combinator-ui: PORT=5858 yarn start


******************************************************************************************
UBUNTU (production)
******************************************************************************************

# -----------------------
# Storing git credentials
# -----------------------

git config --global credential.helper store

then:

git pull

provide a username and password and those details will then be remembered later. 
The credentials are stored in a file on the disk, with the disk permissions of "just 
user readable/writable" but still in plaintext.

If you want to change the password later:

git pull

Will fail, because the password is incorrect, git then removes the offending 
user+password from the ~/.git-credentials file, so now re-run:

git pull

to provide a new password so it works as earlier.

# -------------------------------
# public-foundry-combinator setup
# -------------------------------

# setup
# -----

sudo apt install nginx

conda create --name public-foundry-combinator python=3.7 pyqt numpy tensorflow-gpu=1.15 gunicorn flask flask-cors lxml
conda activate public-foundry-combinator

pip install flask_socketio bs4 svgpathtools
pip install tensor2tensor
pip install magenta

# copy models from public-foundry-pipeline/font-processing to ./
# copy fontforge.so from public-foundry-pipeline/font-processing ./

# ----------------------------------
# public-foundry-combinator-ui setup
# ----------------------------------

# setup
# ----- 

# install yarn

curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
sudo apt update && sudo apt install yarn

# -------------------
# development servers
# -------------------

# to start public-foundry-combinator:    gunicorn --bind 0.0.0.0:5000 wsgi:app
# to start public-foundry-combinator-ui: PORT=5858 yarn start

#-------------------
# production servers
#-------------------

# https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-16-04

# setup
# -----

# build latest UI (every time updated)

cd /home/krister/test-projects/public-foundry-combinator-ui
yarn build
cp -r build ../public-foundry-combinator/static

# link nginx config

sudo ln -s /home/krister/test-projects/public-foundry-combinator/nginx/sites-available/public-foundry-combinator /etc/nginx/sites-enabled

# test nginx config

sudo nginx -t

# start
# -----

# gunicorn overrides combinator.py default host:port
# no mask (-m 007) bc we are not running this as a service

gunicorn --workers 1 --bind unix:pfc.sock wsgi:app
sudo systemctl restart nginx



